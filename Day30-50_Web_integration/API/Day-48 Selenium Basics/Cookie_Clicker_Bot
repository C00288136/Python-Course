from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time

    
        


chrome_options = webdriver.ChromeOptions()
chrome_options.add_experimental_option("detach",True)

driver = webdriver.Chrome(options=chrome_options)
driver.get("https://orteil.dashnet.org/experiments/cookie/")

cookie = driver.find_element(By.ID, value="cookie")
items = driver.find_elements(By.CSS_SELECTOR, value="#store div")
item_ids = [item.get_attribute("id") for item in items]

timeout = time.time() + 10
# time_stop = time.time() + 60*5

while True:
    cookie.click()
    

    if time.time() > timeout:

        all_prices = driver.find_elements(By.CSS_SELECTOR, value="#store b")
        item_prices = []
        # find prices for all upgrades
        for price in all_prices:
            element_text = price.text
            if element_text != "":

                upgrade_cost = int(element_text.split("-")[1].strip().replace(",",""))
                item_prices.append(upgrade_cost)
            
        # TODO locate how much money we have
        
        money_element = driver.find_element(By.ID , value="money").text
        if "," in money_element:
            money_element = money_element.replace(",","")
        cookie_count = int(money_element)
                
        # TODO find highest upgrade we can buy 
        cookie_upgrades = {}
        for n in range(len(item_prices)):
            cookie_upgrades[item_prices[n]] = item_ids[n]
        # TODO Purchase Highest upgrade
        
        affordable_items = {}
        for upgrade_cost, id in cookie_upgrades.items():
            if cookie_count > upgrade_cost:
                affordable_items[upgrade_cost] = id
                
        highest_price_affordable = max(affordable_items)
        purchase = affordable_items[highest_price_affordable]
        
        
        driver.find_element(By.ID, value=purchase).click()
        print(f"{purchase} bought")
        
        timeout = time.time() + 10
            
            
        # if time.time() > time_stop:
        #     break
            
    
    
    





    